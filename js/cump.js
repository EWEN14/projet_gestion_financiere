//Projet MEJK/UNC MIAGE/M√©thode agile/cump
// TODO: Retirer plus tard les values dans les inputs cr√©√©s.

// Tableau contenant les objets repr√©sentant chaque ligne. 
let tabCump = [];
// Insertion d'un √©l√©ment inutile pour manipuler le tableau √† partir de l'index 1.
tabCump.push("CUMP");

// Ci-dessous les propri√©t√©s de chaque objet :
/**
 * type: type de saisie;
 * eQ: quantit√© en entr√©e;
 * eCu: co√ªt unitaire du produit entr√©e;
 * eM : montant total de l'entr√©e;
 * sQ: quantit√© en sortie;
 * sCu: co√ªt unitaire du produit sortie;
 * sM : montant total de la sortie;
 * stkQ: quantit√© du stock;
 * stkCu: co√ªt unitaire d(u/es) produit(s) en stock;
 * stkM: montant total d(u/es) produit(s) en stock;
 */

// Repr√©sente la ligne sur laquelle on travaille.
const saisie = {
  STOCKINITIAL: 'si',
  ENTREE: 'entree',
  SORTIE: 'sortie'
};

// Repr√©sente la ligne sur laquelle on travaille.
let index = 1;

/* D√©finit si une ligne est actuellement en train d'√™tre √©dit√©e. Si c'est le cas, 
on ne pourra pas ajouter de nouvelle entr√©e ou sortie avant que cette variable passe √† false, 
lorsque la ligne aura √©t√© valid√©e. */
let editOn = true;

// Variable permettant de d√©finir quel type d'entr√©e est saisie (stock initial, entr√©e ou sortie).
saisieEnCours = saisie.STOCKINITIAL;

// Action qui se d√©clenche lorsque l'on clique sur le bouton "valider" d'une ligne.
$('table').on('click', '.valider', function () {
  let quantiteSaisie = $(`#i1_l${index}`).val();
  let coutUnitaireSaisi = "";

  if (saisieEnCours != saisie.SORTIE) { // si pas de sortie, on r√©cup√®re la valeur de l'input.
    coutUnitaireSaisi = $(`#i2_l${index}`).val();
  } else { // sinon, on r√©cup√®re le texte dans la colonne.
    coutUnitaireSaisi = $(`#i2_l${index}`).text();
  }

  if (quantiteSaisie && coutUnitaireSaisi) {
    switch (saisieEnCours) {
      case saisie.STOCKINITIAL:

        // On remplace les inputs par le texte contenant les valeurs.
        $(`#td1_l1`).text(`${quantiteSaisie}`);
        $(`#td2_l1`).text(`${coutUnitaireSaisi}`);
        $(`#td3_l1`).text(`${parseInt(quantiteSaisie) * parseFloat(coutUnitaireSaisi)}`);

        // On remplace le bouton "validation" par un bouton "modification". 
        $('#act_l1').html(`<span></span>`);
        // $('#act_l1').html(`<button id="m_${index}" class="btn btn-primary modifier">‚úèÔ∏è</button>`);

        // Objet repr√©sentant la ligne de stock initial cr√©√©, que l'on va pousser dans notre tableau. 
        let stockInitial = {
          type: saisie.STOCKINITIAL,
          eQ: 0,
          eCu: 0,
          eM: 0,
          sQ: 0,
          sCu: 0,
          sM: 0,
          stkQ: parseInt(quantiteSaisie),
          stkCu: parseFloat(coutUnitaireSaisi),
          stkM: parseInt(quantiteSaisie) * parseFloat(coutUnitaireSaisi)
        }
        tabCump.push(stockInitial);

        // En appuyant sur "valider", edit passe √† false car le travail sur la ligne est termin√©.
        editOn = false;

        // Pour indiquer que l'on va travailler sur une nouvelle ligne, on augmente index de 1. 
        index++;
        break;

      case saisie.ENTREE:
        // Remplacement des inputs par le texte contenant les valeurs. 
        $(`#td1_l${index}`).text(`${quantiteSaisie}`);
        $(`#td2_l${index}`).text(`${coutUnitaireSaisi}`);
        // Le montant en entr√©e est arrondi √† deux chiffres apr√®s la virgule.
        let valeurEntree = +(parseInt(quantiteSaisie) * parseFloat(coutUnitaireSaisi)).toFixed(2);
        $(`#td3_l${index}`).text(`${valeurEntree}`);

        // Mise √† jour de la quantit√© en stock.
        let newQuantityIn = parseInt(quantiteSaisie) + tabCump[index - 1].stkQ;
        // Le nouveau cout moyen pond√©r√© est arrondi √† deux chiffres apr√®s la virgule. 
        let newCoutUnitaire = +((valeurEntree + tabCump[index - 1].stkM) / newQuantityIn).toFixed(2);
        // Modification du montant en stock, suite √† une nouvelle entr√©e. 
        let newMontantStockIn = +(newQuantityIn * newCoutUnitaire).toFixed(2);

        $(`#td4_l${index}`).text(`${newQuantityIn}`);
        $(`#td5_l${index}`).text(`${newCoutUnitaire}`);
        $(`#td6_l${index}`).text(`${newMontantStockIn}`);

        // Remplacement du bouton "validation" par un bouton "modification". 
        $(`#act_l${index}`).html(`
          <button id="s_${index}" class="btn btn-danger supprimer">üóëÔ∏è</button>`);

        // Objet repr√©sentant la ligne cr√©√©, que l'on va pousser dans notre tableau.
        let newEntry = {
          type: saisie.ENTREE,
          eQ: parseInt(quantiteSaisie),
          eCu: parseFloat(coutUnitaireSaisi),
          eM: valeurEntree,
          sQ: 0,
          sCu: 0,
          sM: 0,
          stkQ: newQuantityIn,
          stkCu: newCoutUnitaire,
          stkM: newMontantStockIn
        }
        tabCump.push(newEntry);

        // En appuyant sur "valider", edit passe √† false car le travail sur la ligne est termin√©.
        editOn = false;

        // Pour indiquer que l'on va travailler sur une nouvelle ligne, on augmente index de 1. 
        index++;
        break;

      case saisie.SORTIE:
        if (parseInt(quantiteSaisie) > tabCump[index - 1].stkQ) {
          alert("Vous ne pouvez sortir plus de produits qu'il n'y en a en stock.");
          break;
        }

        // Remplacement de l'input quantit√© par le texte contenant les valeurs.
        $(`#td1_l${index}`).text(`${quantiteSaisie}`);

        // Le montant en entr√©e est arrondi √† deux chiffres apr√®s la virgule.
        let valeurSortie = +(parseInt(quantiteSaisie) * parseFloat(coutUnitaireSaisi)).toFixed(2);
        $(`#td3_l${index}`).text(`${valeurSortie}`);

        // Mise √† jour de la quantit√© en stock.
        let newQuantityOut = tabCump[index - 1].stkQ - parseInt(quantiteSaisie);

        let newMontantStockOut = +(newQuantityOut * parseFloat(coutUnitaireSaisi)).toFixed(2);

        /* En cas de sortie, le co√ªt unitaire reste le m√™me qu'√† la ligne pr√©c√©dente et sera
        affich√© d√®s la cr√©ation de la ligne dans la colonne correspondante au sortie et au stock. */
        $(`#td4_l${index}`).text(`${newQuantityOut}`);
        $(`#td6_l${index}`).text(`${newMontantStockOut}`);

        // Remplacement du bouton "validation" par un bouton "modification". 
        $(`#act_l${index}`).html(`
          <button id="s_${index}" class="btn btn-danger supprimer">üóëÔ∏è</button>`);

        // Objet repr√©sentant la ligne cr√©√©, que l'on va pousser dans notre tableau.
        let newSortie = {
          type: saisie.SORTIE,
          eQ: 0,
          eCu: 0,
          eM: 0,
          sQ: parseInt(quantiteSaisie),
          sCu: parseFloat(coutUnitaireSaisi),
          sM: valeurSortie,
          stkQ: newQuantityOut,
          stkCu: parseFloat(coutUnitaireSaisi),
          stkM: newMontantStockOut
        }
        tabCump.push(newSortie);

        // En appuyant sur "valider", edit passe √† false car le travail sur la ligne est termin√©.
        editOn = false;

        // Pour indiquer que l'on va travailler sur une nouvelle ligne, on augmente index de 1. 
        index++;
        break;

      default:
        alert("Vous n'√™tes pas cens√© voir ce message.");
    }
  } else {
    alert("Veuillez remplir le(s) champ(s) avant de valider.");
  }
});

/* En utilisant le bouton pour ajouter une nouvelle entr√©e, 
on cr√©e une nouvelle ligne avec des champs de saisies dans les colonnes d√©di√©es. */
$('#new-entree').on('click', function () {
  if (!editOn) {
    // Retrait du bouton "suppression" de la ligne pr√©c√©dente.
    $(`#s_${index - 1}`).remove();

    editOn = true;
    saisieEnCours = saisie.ENTREE;
    $('.ajout').before(`
    <tr id="l${index}">
      <td class="text-left align-middle">Entr√©e</td>
      <td class="align-middle" id="td1_l${index}"><input id="i1_l${index}" type="number" min="0" name="quantite" placeholder="ex : 100" value="100"></td>
      <td class="align-middle" id="td2_l${index}"><input id="i2_l${index}" type="number" min="0" name="coutunitaire" placeholder="ex : 45" value="45"></td>
      <td class="align-middle" id="td3_l${index}"></td>
      <td colspan="3"></td>
      <td class="align-middle" id="td4_l${index}"></td>
      <td class="align-middle" id="td5_l${index}"></td>
      <td class="align-middle" id="td6_l${index}"></td>
      <td class="align-middle act" id="act_l${index}">
        <button class="btn btn-success valider">‚úîÔ∏è</button>
        <button id="s_${index}" class="btn btn-danger supprimer">üóëÔ∏è</button>
      </td>
    </tr>
  `);
  } else {
    alert("Veuillez compl√©ter les champs de saisie avant de cr√©er une nouvelle entr√©e.");
  }
});

/* En utilisant le bouton pour ajouter une nouvelle entr√©e, 
on cr√©e une nouvelle ligne avec des champs de saisies dans les colonnes d√©di√©es. */
$('#new-sortie').on('click', function () {
  if (!editOn) {
    // Retrait du bouton "suppression" de la ligne pr√©c√©dente.
    $(`#s_${index - 1}`).remove();

    editOn = true;
    saisieEnCours = saisie.SORTIE;
    $('.ajout').before(`
    <tr id="l${index}">
      <td class="text-left align-middle">Sortie</td>
      <td colspan="3"></td>
      <td class="align-middle" id="td1_l${index}"><input id="i1_l${index}" type="number" min="0" max="${tabCump[index - 1].stkQ}" name="quantite" placeholder="max: ${tabCump[index - 1].stkQ}"></td>
      <td class="align-middle" id="td2_l${index}"><span id="i2_l${index}">${tabCump[index - 1].stkCu}</span></td>
      <td class="align-middle" id="td3_l${index}"></td>
      <td class="align-middle" id="td4_l${index}"></td>
      <td class="align-middle" id="td5_l${index}">${tabCump[index - 1].stkCu}</td>
      <td class="align-middle" id="td6_l${index}"></td>
      <td class="align-middle act" id="act_l${index}">
        <button class="btn btn-success valider">‚úîÔ∏è</button>
        <button id="s_${index}" class="btn btn-danger supprimer">üóëÔ∏è</button>
      </td>
    </tr>
  `);
  } else {
    alert("Veuillez compl√©ter les champs de saisie avant de cr√©er une nouvelle sortie.");
  }
});

/* Pour des √©l√©ments, tels que les boutons "confirmation" et "validation", g√©n√©r√©s
par le biais de JQuery, on ne peut agir sur eux qu'√† partir d'un parent d√©j√† existant dans le DOM.
Plut√¥t que de s√©lectionner directement l'√©l√©ment g√©n√©r√©. On utilise .on avec ce parent. */
$('table').on('click', '.modifier', function () {
  console.log('modification....');
  // TODO: Impl√©menter plus tard la modification.
});

// Seule la derni√®re ligne est supprim√©e si le bouton "suppression" est s√©lectionn√©.  
$('table').on('click', '.supprimer', function () {
  // R√©cup√®ration de id du bouton "suppression", pour avoir le num√©ro de ligne / l'index.  
  let idRowToDelete = $(this).attr('id');
  let splitString = idRowToDelete.split('_');
  let id = splitString[1];

  // Pr√©voir la suppression selon deux cas : si la ligne est en cours d'√©dition ou non.
  // Si la ligne n'est pas en cours d'√©dtion, elle est valid√©e et on place l'index √† +1.
  // La ligne √† supprimer est donc √† l'index actuel -1 et on doit retirer l'√©l√©ment correspondant dans notre tableau d'objets.
  // En plus de cela, on v√©rifie que que l'index est coh√©rent avec la ligne que l'on va supprimer.
  if (!editOn && id == (index - 1)) {
    $(`#l${index - 1}`).remove();
    tabCump.splice(id, 1);
    // Remettre le bouton "suppression" √† la ligne pr√©c√©dente. 
    $(`#m_${index - 2}`).after(`<button id="s_${index - 2}" class="btn btn-danger supprimer" style="margin-left: 5px;">üóëÔ∏è</button>`)
    // R√©duction de l'index "suppression". 
    index--;
  } else if (editOn && id == index) {
    // Sinon, si la ligne est en cours d'√©dition, on la retire √† l'index actuel et on repasse √©dit √† false. 
    $(`#l${index}`).remove();
    editOn = false;
    // Remettre le bouton de "suppression" √† la ligne pr√©c√©dente. 
    $(`#m_${index - 1}`).after(`<button id="s_${index - 1}" class="btn btn-danger supprimer" style="margin-left: 5px;">üóëÔ∏è</button>`)

  } else {
        // Cas o√π l'utilisateur manipule l'id des boutons de suppression, en modifiant l'HTML via l'inspecteur.
    alert("Vous avez manipul√© manipul√© quelque chose que vous n'auriez pas d√ª... Arr√™tez de faire n'importe quoi !")
  }
});
